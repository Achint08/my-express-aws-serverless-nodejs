# serverless.yml

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  tableName: 'users-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true

service: my-express-application

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-south-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}
    password: '**'
functions:
  app:
    handler: index.handler
    events:
      - http: 
          method: post
          path: /
          authorizer:
            name: auth
            resultTtlInSeconds: 3000
            identitySource: method.request.header.Authorization
            type: token
    awsKmsKeyArn: ''
    

  getUser:
    handler: index.handler
    events:
      - http: 'GET /users/{proxy+}'

  createUser:
    handler: index.handler
    events:
        - http: 'POST /users'

  auth:
    handler: index.auth

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
